#This edition is amazingfrom PyQt5 import QtCore, QtGui, QtWidgetsimport sysfrom PyQt5.QtWidgets import *import timeimport threadingimport sysimport copyimport waveimport contextlibfrom pyqtgraph import PlotWidgetfrom PyQt5.QtWidgets import (QWidget,                             QPushButton, QApplication, QGridLayout)from PyQt5.QtCore import QThread, QObject, pyqtSignalfrom PyQt5 import QtCore, QtGui, QtWidgetsfrom playsound import playsoundfrom PyQt5.QtMultimedia import QSoundimport keyboardimport timeimport numpy as npimport sounddeviceimport sysfrom PyQt5.QtWidgets import (QWidget,                             QPushButton, QApplication, QGridLayout)from PyQt5 import QtCore, QtGui, QtWidgetsfrom PyQt5 import QtCore, QtGui, QtWidgetsfrom scipy.io import wavfilefrom scipy.io.wavfile import readimport matplotlib.pyplot as pltimport pyqtgraph as pgfrom pyqtgraph import PlotWidgetimport sys, osfrom PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QHBoxLayout, QVBoxLayoutfrom PyQt5.QtCore import QUrlfrom PyQt5.QtMultimedia import QMediaPlayer, QMediaContentfrom PyQt5.QtCore import Qtfrom PyQt5.QtWidgets import QSliderimport matplotlib.pyplot as pltimport numpy as npfrom scipy.io import wavfileimport sysimport matplotlibimport mathmatplotlib.use('Qt5Agg')from PyQt5.QtWidgets import QDialog, QApplication, QPushButton, QVBoxLayoutfrom PyQt5.QtWidgets import QApplication, QWidget, QLabelfrom PyQt5.QtGui import QIcon, QPixmapfrom PyQt5 import QtCore, QtWidgetsimport randomfrom matplotlib.backends.backend_qt5agg import FigureCanvasQTAggfrom matplotlib.figure import Figureimport sysimport numpy as npimport matplotlib.pyplot as pltfrom matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvasfrom PyQt5.QtWidgets import QApplication, QWidgetfrom pyqtgraph import PlotWidgetfrom PyQt5 import QtCore, QtGui, QtWidgetsfrom pyqtgraph import GraphicsLayoutWidgetimport sysimport shutilimport osimport csvimport datetimeimport numpy as npimport pandas as pdimport pyqtgraph.exportersimport pyqtgraph as pgfrom PyQt5 import QtWidgets as qtwfrom PyQt5 import QtCore as qtcfrom PyQt5 import QtGui as qtgfrom PyQt5 import QtCore, QtGui, QtWidgetsimport loggingfrom pyqtgraph import PlotWidgetfrom PyQt5 import QtWidgets, uic, QtGuifrom PyQt5 import QtCoreimport sysimport numpy as npimport pandas as pdfrom PyQt5.QtWidgets import QFileDialog, QGraphicsScenefrom pyqtgraph import PlotWidget, PlotItemimport pyqtgraph as pgimport osfrom scipy import signalimport matplotlib.pyplot as pltimport pyqtgraph.exportersfrom matplotlib.animation import FuncAnimation###############################################################class GuitarString:    def __init__(self, pitch, starting_sample, sampling_freq, stretch_factor):        """Inits the guitar string."""        self.pitch = pitch        self.starting_sample = starting_sample        self.sampling_freq = sampling_freq        self.stretch_factor = stretch_factor        self.init_wavetable()        self.current_sample = 0        self.previous_value = 0    def init_wavetable(self):        """Generates a new wavetable for the string."""        wavetable_size = self.sampling_freq // int(self.pitch)        self.wavetable = (2 * np.random.randint(0, 2, wavetable_size) - 1).astype(float)    def get_sample(self):        """Returns next sample from string."""        if self.current_sample >= self.starting_sample:            current_sample_mod = self.current_sample % self.wavetable.size            randomVariable = np.random.binomial(1, 1 - 1 / self.stretch_factor)            if randomVariable == 0:                self.wavetable[current_sample_mod] = 0.5 * (self.wavetable[current_sample_mod] + self.previous_value)            sample = self.wavetable[current_sample_mod]            self.previous_value = sample            self.current_sample += 1        else:            self.current_sample += 1            sample = 0        return sampleclass Ui_MainWindow(object):    def setupUi(self, MainWindow):        MainWindow.setObjectName("MainWindow")        MainWindow.resize(1165, 774)        self.centralwidget = QtWidgets.QWidget(MainWindow)        self.centralwidget.setObjectName("centralwidget")        self.gridLayout_main = QtWidgets.QGridLayout(self.centralwidget)        self.gridLayout_main.setObjectName("gridLayout_main")        self.splitter = QtWidgets.QSplitter(self.centralwidget)        self.splitter.setOrientation(QtCore.Qt.Vertical)        self.splitter.setChildrenCollapsible(False)        self.splitter.setObjectName("splitter")        self.layoutWidget = QtWidgets.QWidget(self.splitter)        self.layoutWidget.setObjectName("layoutWidget")        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget)        self.verticalLayout.setContentsMargins(0, 0, 0, 0)        self.verticalLayout.setObjectName("verticalLayout")        self.graphicsView_signal = PlotWidget(self.layoutWidget)        self.graphicsView_signal.setMinimumSize(QtCore.QSize(600, 0))        self.graphicsView_signal.setObjectName("graphicsView_signal")        self.verticalLayout.addWidget(self.graphicsView_signal)        self.horizontalLayout = QtWidgets.QHBoxLayout()        self.horizontalLayout.setSpacing(50)        self.horizontalLayout.setObjectName("horizontalLayout")        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)        self.horizontalLayout.addItem(spacerItem)        self.play_pause = QtWidgets.QPushButton(self.layoutWidget)        self.play_pause.setMaximumSize(QtCore.QSize(120, 16777215))        font = QtGui.QFont()        font.setBold(True)        font.setWeight(75)        self.play_pause.setFont(font)        self.play_pause.setIconSize(QtCore.QSize(30, 30))        self.play_pause.setCheckable(True)        self.play_pause.setChecked(False)        self.play_pause.setObjectName("play_pause")        self.horizontalLayout.addWidget(self.play_pause)        spacerPiano = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)        self.horizontalLayout.addItem(spacerPiano)        self.reset = QtWidgets.QPushButton(self.layoutWidget)        self.reset.setMaximumSize(QtCore.QSize(120, 16777215))        font = QtGui.QFont()        font.setPointSize(9)        font.setBold(True)        font.setWeight(75)        self.reset.setFont(font)        self.reset.setObjectName("reset")        self.horizontalLayout.addWidget(self.reset)        spacerdrum = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)        self.horizontalLayout.addItem(spacerdrum)        self.gridLayout = QtWidgets.QGridLayout()        self.gridLayout.setHorizontalSpacing(15)        self.gridLayout.setObjectName("gridLayout")        self.labelVolume = QtWidgets.QLabel(self.layoutWidget)        font = QtGui.QFont()        font.setPointSize(9)        font.setBold(True)        font.setWeight(75)        self.labelVolume.setFont(font)        self.labelVolume.setObjectName("labelVolume")        self.gridLayout.addWidget(self.labelVolume, 0, 1, 1, 1, QtCore.Qt.AlignRight)        self.horizontalSlider_volume = QtWidgets.QSlider(self.layoutWidget)        self.horizontalSlider_volume.setProperty("value", 50)        self.horizontalSlider_volume.setOrientation(QtCore.Qt.Horizontal)        self.horizontalSlider_volume.setObjectName("horizontalSlider_volume")        self.gridLayout.addWidget(self.horizontalSlider_volume, 0, 2, 1, 1)        self.horizontalLayout.addLayout(self.gridLayout)        spacerflute = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)        self.horizontalLayout.addItem(spacerflute)        index=[0,1,3,5,6]        stretch=[1,1,1,2,1]        for i in range(5):            self.horizontalLayout.setStretch(index[i], stretch[i])        self.verticalLayout.addLayout(self.horizontalLayout)        self.layoutWidget1 = QtWidgets.QWidget(self.splitter)        self.layoutWidget1.setObjectName("layoutWidget1")        self.horizontalLayout_piano = QtWidgets.QHBoxLayout(self.layoutWidget1)        self.horizontalLayout_piano.setContentsMargins(0, 0, 0, 0)        self.horizontalLayout_piano.setObjectName("horizontalLayout_piano")        spacermain = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)        self.horizontalLayout_piano.addItem(spacermain)        self.tabWidget = QtWidgets.QTabWidget(self.layoutWidget1)        self.tabWidget.setMaximumSize(QtCore.QSize(16777215, 430))        font = QtGui.QFont()        font.setPointSize(9)        self.tabWidget.setFont(font)        self.tabWidget.setObjectName("tabWidget")        self.equalizerTab = QtWidgets.QWidget()        self.equalizerTab.setObjectName("equalizerTab")        self.horizontalLayout_flute = QtWidgets.QHBoxLayout(self.equalizerTab)        self.horizontalLayout_flute.setObjectName("horizontalLayout_flute")        self.verticalLayout_drum = QtWidgets.QVBoxLayout()        self.verticalLayout_drum.setSpacing(29)        self.verticalLayout_drum.setObjectName("verticalLayout_drum")        spacerbit = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)        self.verticalLayout_drum.addItem(spacerbit)        self.horizontalLayout_tabwidget = QtWidgets.QHBoxLayout()        self.horizontalLayout_tabwidget.setObjectName("horizontalLayout_tabwidget")        self.verticalLayout_tabright = QtWidgets.QVBoxLayout()        self.verticalLayout_tabright.setSpacing(1)        self.verticalLayout_tabright.setObjectName("verticalLayout_tabright")        self.label_piano_icon = QtWidgets.QLabel(self.equalizerTab)        self.label_piano_icon.setMaximumSize(QtCore.QSize(96, 34))        self.label_piano_icon.setText("")        self.label_piano_icon.setPixmap(QtGui.QPixmap("piano.jpg"))        self.label_piano_icon.setScaledContents(True)        self.label_piano_icon.setObjectName("label_piano_icon")        self.verticalLayout_tabright.addWidget(self.label_piano_icon, 0, QtCore.Qt.AlignHCenter)        self.label_piano = QtWidgets.QLabel(self.equalizerTab)        self.label_piano.setObjectName("label_piano")        self.verticalLayout_tabright.addWidget(self.label_piano)        self.horizontalLayout_tabwidget.addLayout(self.verticalLayout_tabright)        self.verticalSlider_piano = QtWidgets.QSlider(self.equalizerTab)        self.verticalSlider_piano.setProperty("value", 50)        self.verticalSlider_piano.setOrientation(QtCore.Qt.Horizontal)        self.verticalSlider_piano.setObjectName("verticalSlider_piano")        self.horizontalLayout_tabwidget.addWidget(self.verticalSlider_piano)        self.verticalLayout_drum.addLayout(self.horizontalLayout_tabwidget)        self.horizontalLayout_down = QtWidgets.QHBoxLayout()        self.horizontalLayout_down.setObjectName("horizontalLayout_down")        self.verticalLayout_up = QtWidgets.QVBoxLayout()        self.verticalLayout_up.setSpacing(1)        self.verticalLayout_up.setObjectName("verticalLayout_up")        self.label_flute_icon = QtWidgets.QLabel(self.equalizerTab)        self.label_flute_icon.setMaximumSize(QtCore.QSize(68, 63))        self.label_flute_icon.setText("")        self.label_flute_icon.setPixmap(QtGui.QPixmap("flute.png"))        self.label_flute_icon.setScaledContents(True)        self.label_flute_icon.setObjectName("label_flute_icon")        self.verticalLayout_up.addWidget(self.label_flute_icon, 0, QtCore.Qt.AlignHCenter)        self.label_flute = QtWidgets.QLabel(self.equalizerTab)        self.label_flute.setObjectName("label_flute")        self.verticalLayout_up.addWidget(self.label_flute)        self.horizontalLayout_down.addLayout(self.verticalLayout_up)        self.verticalSlider_flute = QtWidgets.QSlider(self.equalizerTab)        self.verticalSlider_flute.setProperty("value", 50)        self.verticalSlider_flute.setOrientation(QtCore.Qt.Horizontal)        self.verticalSlider_flute.setObjectName("verticalSlider_flute")        self.horizontalLayout_down.addWidget(self.verticalSlider_flute)        self.verticalLayout_drum.addLayout(self.horizontalLayout_down)        self.horizontalLayout_drum = QtWidgets.QHBoxLayout()        self.horizontalLayout_drum.setObjectName("horizontalLayout_drum")        self.verticalLayout_left = QtWidgets.QVBoxLayout()        self.verticalLayout_left.setSpacing(1)        self.verticalLayout_left.setObjectName("verticalLayout_left")        self.label_drums_icon = QtWidgets.QLabel(self.equalizerTab)        self.label_drums_icon.setMaximumSize(QtCore.QSize(101, 63))        self.label_drums_icon.setText("")        self.label_drums_icon.setPixmap(QtGui.QPixmap("Drums5.png"))        self.label_drums_icon.setScaledContents(True)        self.label_drums_icon.setObjectName("label_drums_icon")        self.verticalLayout_left.addWidget(self.label_drums_icon, 0, QtCore.Qt.AlignHCenter)        self.label_drums = QtWidgets.QLabel(self.equalizerTab)        self.label_drums.setObjectName("label_drums")        self.verticalLayout_left.addWidget(self.label_drums)        self.horizontalLayout_drum.addLayout(self.verticalLayout_left)        self.verticalSlider_drums = QtWidgets.QSlider(self.equalizerTab)        self.verticalSlider_drums.setMinimumSize(QtCore.QSize(0, 0))        self.verticalSlider_drums.setProperty("value", 50)        self.verticalSlider_drums.setOrientation(QtCore.Qt.Horizontal)        self.verticalSlider_drums.setObjectName("verticalSlider_drums")        self.horizontalLayout_drum.addWidget(self.verticalSlider_drums)        self.horizontalLayout_drum.setStretch(1, 11)        self.verticalLayout_drum.addLayout(self.horizontalLayout_drum)        spacerbit4 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)        self.verticalLayout_drum.addItem(spacerbit4)        self.horizontalLayout_flute.addLayout(self.verticalLayout_drum)        spacerright = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)        self.horizontalLayout_flute.addItem(spacerright)        #######        self.figure_Spectrogram = Figure(figsize=(3, 3), dpi=100)        self.axes_Spectrogram = self.figure_Spectrogram.add_subplot()        self.canvas_Spectrogram = FigureCanvas(self.figure_Spectrogram)        self.canvas_Spectrogram.figure.set_facecolor("#e5e5e6")  # applying the GUI's color on matplotlib to look nice        self.horizontalLayout_flute.addWidget(self.canvas_Spectrogram)        ############        self.horizontalLayout_flute.setStretch(0, 1)        self.horizontalLayout_flute.setStretch(2, 1)        self.tabWidget.addTab(self.equalizerTab, "")        self.pianoTab = QtWidgets.QWidget()        self.pianoTab.setObjectName("pianoTab")        self.gridLayout_tab = QtWidgets.QGridLayout(self.pianoTab)        self.gridLayout_tab.setObjectName("gridLayout_tab")        self.verticalLayout_right = QtWidgets.QVBoxLayout()        self.verticalLayout_right.setObjectName("verticalLayout_right")        self.horizontalLayout_right = QtWidgets.QHBoxLayout()        self.horizontalLayout_right.setSpacing(20)        self.horizontalLayout_right.setObjectName("horizontalLayout_right")        spacerItemUp = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)        self.horizontalLayout_right.addItem(spacerItemUp)        self.label_up = QtWidgets.QLabel(self.pianoTab)        self.label_up.setObjectName("label_up")        self.horizontalLayout_right.addWidget(self.label_up)        self.horizontalSlider_setting = QtWidgets.QSlider(self.pianoTab)        self.horizontalSlider_setting.setOrientation(QtCore.Qt.Horizontal)        self.horizontalSlider_setting.setObjectName("horizontalSlider_setting")        self.horizontalLayout_right.addWidget(self.horizontalSlider_setting)        self.horizontalSlider_setting.setSingleStep(5000)        self.horizontalSlider_setting.setMinimum(35000)        self.horizontalSlider_setting.setMaximum(60000)        self.horizontalSlider_setting.setValue(44100)        spacerItem9 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)        self.horizontalLayout_right.addItem(spacerItem9)        self.verticalLayout_right.addLayout(self.horizontalLayout_right)        self.verticalLayout_piano = QtWidgets.QVBoxLayout()        self.verticalLayout_piano.setSpacing(1)        self.verticalLayout_piano.setObjectName("verticalLayout_piano")        self.piano_image = QtWidgets.QLabel(self.pianoTab)        self.piano_image.setText("")        self.piano_image.setPixmap(QtGui.QPixmap("piano_2.jpg"))        self.piano_image.setScaledContents(True)        self.piano_image.setObjectName("piano_image")        self.verticalLayout_piano.addWidget(self.piano_image)        self.horizontalLayout_key = QtWidgets.QHBoxLayout()        self.horizontalLayout_key.setSpacing(0)        self.horizontalLayout_key.setObjectName("horizontalLayout_key")        self.pushButton_piano1 = QtWidgets.QPushButton(self.pianoTab)        self.pushButton_piano1.setObjectName("pushButton_piano1")        self.horizontalLayout_key.addWidget(self.pushButton_piano1)        self.pushButton_piano2 = QtWidgets.QPushButton(self.pianoTab)        self.pushButton_piano2.setObjectName("pushButton_piano2")        self.horizontalLayout_key.addWidget(self.pushButton_piano2)        self.pushButton_piano3 = QtWidgets.QPushButton(self.pianoTab)        self.pushButton_piano3.setObjectName("pushButton_piano3")        self.horizontalLayout_key.addWidget(self.pushButton_piano3)        self.pushButton_piano4 = QtWidgets.QPushButton(self.pianoTab)        self.pushButton_piano4.setObjectName("pushButton_piano4")        self.horizontalLayout_key.addWidget(self.pushButton_piano4)        self.pushButton_piano5 = QtWidgets.QPushButton(self.pianoTab)        self.pushButton_piano5.setObjectName("pushButton_piano5")        self.horizontalLayout_key.addWidget(self.pushButton_piano5)        self.pushButton_piano6 = QtWidgets.QPushButton(self.pianoTab)        self.pushButton_piano6.setObjectName("pushButton_piano6")        self.horizontalLayout_key.addWidget(self.pushButton_piano6)        self.pushButton_piano7 = QtWidgets.QPushButton(self.pianoTab)        self.pushButton_piano7.setObjectName("pushButton_piano7")        self.horizontalLayout_key.addWidget(self.pushButton_piano7)        self.pushButton_piano8 = QtWidgets.QPushButton(self.pianoTab)        self.pushButton_piano8.setObjectName("pushButton_piano8")        self.horizontalLayout_key.addWidget(self.pushButton_piano8)        self.pushButton_piano9 = QtWidgets.QPushButton(self.pianoTab)        self.pushButton_piano9.setObjectName("pushButton_piano9")        self.horizontalLayout_key.addWidget(self.pushButton_piano9)        self.pushButton_piano10 = QtWidgets.QPushButton(self.pianoTab)        self.pushButton_piano10.setObjectName("pushButton_piano10")        self.horizontalLayout_key.addWidget(self.pushButton_piano10)        self.pushButton_piano11 = QtWidgets.QPushButton(self.pianoTab)        self.pushButton_piano11.setObjectName("pushButton_piano11")        self.horizontalLayout_key.addWidget(self.pushButton_piano11)        self.pianoPushbuttons=[self.pushButton_piano1,self.pushButton_piano2,self.pushButton_piano3,self.pushButton_piano4,self.pushButton_piano5,self.pushButton_piano6,self.pushButton_piano7,self.pushButton_piano8,self.pushButton_piano9,self.pushButton_piano10,self.pushButton_piano11]        self.verticalLayout_piano.addLayout(self.horizontalLayout_key)        self.verticalLayout_right.addLayout(self.verticalLayout_piano)        self.gridLayout_tab.addLayout(self.verticalLayout_right, 0, 1, 1, 1)        spacerItem10 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)        self.gridLayout_tab.addItem(spacerItem10, 0, 2, 1, 1)        spacerItem11 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)        self.gridLayout_tab.addItem(spacerItem11, 0, 0, 1, 1)        self.tabWidget.addTab(self.pianoTab, "")        self.guitarTab = QtWidgets.QWidget()        self.guitarTab.setObjectName("guitarTab")        self.gridLayout_equalizer = QtWidgets.QGridLayout(self.guitarTab)        self.gridLayout_equalizer.setObjectName("gridLayout_equalizer")        self.horizontalLayout_left = QtWidgets.QHBoxLayout()        self.horizontalLayout_left.setObjectName("horizontalLayout_left")        self.verticalLayout_tableft = QtWidgets.QVBoxLayout()        self.verticalLayout_tableft.setSpacing(0)        self.verticalLayout_tableft.setObjectName("verticalLayout_tableft")        self.label_keyboard_guitar = QtWidgets.QLabel(self.guitarTab)        self.label_keyboard_guitar.setMaximumSize(QtCore.QSize(16777215, 60))        self.label_keyboard_guitar.setObjectName("label_keyboard_guitar")        self.verticalLayout_tableft.addWidget(self.label_keyboard_guitar, 0, QtCore.Qt.AlignHCenter | QtCore.Qt.AlignBottom)        self.keyboard_guitar = QtWidgets.QLabel(self.guitarTab)        self.keyboard_guitar.setMaximumSize(QtCore.QSize(16777215, 60))        self.keyboard_guitar.setObjectName("keyboard_guitar")        self.verticalLayout_tableft.addWidget(self.keyboard_guitar, 0, QtCore.Qt.AlignHCenter | QtCore.Qt.AlignTop)        self.horizontalLayout_left.addLayout(self.verticalLayout_tableft)        self.guitar_image = QtWidgets.QLabel(self.guitarTab)        self.guitar_image.setText("")        self.guitar_image.setPixmap(QtGui.QPixmap("guitar3.png"))        self.guitar_image.setScaledContents(True)        self.guitar_image.setObjectName("guitar_image")        self.horizontalLayout_left.addWidget(self.guitar_image)        self.gridLayout_equalizer.addLayout(self.horizontalLayout_left, 0, 0, 1, 1)        self.tabWidget.addTab(self.guitarTab, "")        self.drumsTab = QtWidgets.QWidget()        self.drumsTab.setObjectName("drumsTab")        self.verticalLayout_instruments = QtWidgets.QVBoxLayout(self.drumsTab)        self.verticalLayout_instruments.setObjectName("verticalLayout_instruments")        self.horizontalLayout_up = QtWidgets.QHBoxLayout()        self.horizontalLayout_up.setObjectName("horizontalLayout_up")        self.verticalLayout_equalizer = QtWidgets.QVBoxLayout()        self.verticalLayout_equalizer.setSpacing(0)        self.verticalLayout_equalizer.setObjectName("verticalLayout_equalizer")        self.label_keyboard_drums = QtWidgets.QLabel(self.drumsTab)        self.label_keyboard_drums.setMaximumSize(QtCore.QSize(16777215, 60))        self.label_keyboard_drums.setObjectName("label_keyboard_drums")        self.verticalLayout_equalizer.addWidget(self.label_keyboard_drums, 0, QtCore.Qt.AlignHCenter | QtCore.Qt.AlignBottom)        self.keyboard_drums = QtWidgets.QLabel(self.drumsTab)        self.keyboard_drums.setMaximumSize(QtCore.QSize(16777215, 60))        self.keyboard_drums.setObjectName("keyboard_drums")        self.verticalLayout_equalizer.addWidget(self.keyboard_drums, 0, QtCore.Qt.AlignHCenter | QtCore.Qt.AlignTop)        self.horizontalLayout_up.addLayout(self.verticalLayout_equalizer)        self.drums_image = QtWidgets.QLabel(self.drumsTab)        self.drums_image.setText("")        self.drums_image.setPixmap(QtGui.QPixmap("Drums5.png"))        self.drums_image.setScaledContents(True)        self.drums_image.setObjectName("drums_image")        self.horizontalLayout_up.addWidget(self.drums_image)        self.verticalLayout_instruments.addLayout(self.horizontalLayout_up)        self.tabWidget.addTab(self.drumsTab, "")        self.horizontalLayout_piano.addWidget(self.tabWidget)        spacerItem12 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)        self.horizontalLayout_piano.addItem(spacerItem12)        self.horizontalLayout_piano.setStretch(1, 10)        self.gridLayout_main.addWidget(self.splitter, 0, 0, 1, 1)        MainWindow.setCentralWidget(self.centralwidget)        self.menubar = QtWidgets.QMenuBar(MainWindow)        self.menubar.setGeometry(QtCore.QRect(0, 0, 1165, 26))        self.menubar.setObjectName("menubar")        self.menuFile = QtWidgets.QMenu(self.menubar)        self.menuFile.setObjectName("menuFile")        MainWindow.setMenuBar(self.menubar)        self.statusbar = QtWidgets.QStatusBar(MainWindow)        self.statusbar.setObjectName("statusbar")        MainWindow.setStatusBar(self.statusbar)        self.actionOpen = QtWidgets.QAction(MainWindow)        self.actionOpen.setObjectName("actionOpen")        self.menuFile.addAction(self.actionOpen)        self.menubar.addAction(self.menuFile.menuAction())        self.menubar.setNativeMenuBar(False)        ############################################################        self.player = QMediaPlayer()        self.sliders = [self.verticalSlider_piano, self.verticalSlider_flute, self.verticalSlider_drums]        for n in range(3):  # sliders congifuration            self.sliders[n].setSingleStep(1)            self.sliders[n].setMinimum(0)            self.sliders[n].setMaximum(10)            self.sliders[n].setValue(5)        self.horizontalSlider_volume.setMinimum(0)        self.horizontalSlider_volume.setMaximum(100)        self.horizontalSlider_volume.setSingleStep(5)        self.horizontalSlider_volume.setValue(50)  # set the volume to be in the middle        self.player.setVolume(self.horizontalSlider_volume.value())        self.verticalSlider_piano.sliderReleased.connect(lambda: self.equalizer(0, 1, 2000))        self.verticalSlider_flute.sliderReleased.connect(lambda: self.equalizer(1, 2100, 5000))        self.horizontalSlider_volume.valueChanged[int].connect(lambda: self.volumeControl())        self.verticalSlider_drums.sliderReleased.connect(lambda: self.equalizer(2, 6001, 9000))        self.data = []        self.samplingFrequency = 0        self.sound = []        self.length_in_seconds = 0        self.time = 0        self.signal = 0        self.fft_spectrumCurrent = 0        self.fft_spectrumOriginal = 0        self.frequencyBins = []        self.fileCount = 0        self.originalPath = ""        self.duration = 0        self.updatePlotIndex = 0        self.play_pause_flag = True        self.pens = [pg.mkPen('r'), pg.mkPen('g'), pg.mkPen('b'), pg.mkPen('y')]        self.palette = ['viridis', 'plasma', 'Blues', 'Greys', 'pink']  # spectrogram palettes        self.timer_updatePlot = QtCore.QTimer()  ##timers configurarion        self.timer_fileDuration = QtCore.QTimer()  ##timers configurarion        self.timer_fileDuration.timeout.connect(lambda: self.timer_updatePlot.stop())        self.timer_updatePlot.setInterval(5)        self.timer_updatePlot.timeout.connect(self.update_plot_data)        self.retranslateUi(MainWindow)        self.tabWidget.setCurrentIndex(0)  ##set default tap to be equalizer        QtCore.QMetaObject.connectSlotsByName(MainWindow)        self.actionOpen.triggered.connect(lambda: self.open())        self.play_pause.clicked.connect(lambda: self.play_pauseFunction())        self.reset.clicked.connect(lambda: self.resetFunction())        ########################################        self.guitar_sounds = []  # storing guitar notes        self.guitar()  ##calculating guitar notes        ##############################        self.pianoSounds = []  # storing piano notes        self.piano()  ##calculating piano notes        #######################        self.drumSounds = []  # storing drums notes        self.drum()  ##calculating drums notes        self.keysandnotes = {"q": self.pianoSounds[0], "w": self.pianoSounds[1], "e": self.pianoSounds[2],                        "r": self.pianoSounds[3], "t": self.pianoSounds[4],                        "a": self.guitar_sounds[0], "s": self.guitar_sounds[1], "d": self.guitar_sounds[2],                        "f": self.guitar_sounds[3], "g": self.guitar_sounds[4],                        "z": self.drumSounds[0], "x": self.drumSounds[1], "c": self.drumSounds[2],                        "v": self.drumSounds[3], "b": self.drumSounds[3]                        }        self.pianos = ['q', 'w', 'e', 'r', 't']        self.guitars = ['a', 's', 'd', 'f', 'g']        self.drumsss = ['z', 'x', 'c', 'v', 'b']        self.virtual_Instruments_thread_Function()  ##start virtual instruments        for i in range (11):            self.pianoPushbuttons[i].clicked.connect(lambda : sounddevice.play(self.pianoSounds[i%5]))    def drum(self):        notes = [.9, .1, .2, .3, .4, .5, .6, .7, .8, .9]        for note in notes:            freq_sample = 3000            stretch_factor = 2            wavetable_size = freq_sample // 80            wavetable = np.ones(wavetable_size)            samples = []            current_sample = 0            previous_value = 0            while len(samples) < freq_sample:                randomVariable = np.random.binomial(1, note)                sign = float(randomVariable == 1) * 2 - 1                stretch = np.random.binomial(1, 1 - 1 / stretch_factor)                if stretch == 0:                    wavetable[current_sample] = sign * 0.5 * (wavetable[current_sample] + previous_value)                samples.append(wavetable[current_sample])                previous_value = samples[-1]                current_sample += 1                current_sample = current_sample % wavetable.size            song = np.array(samples)            self.drumSounds.append(song)    def piano(self, duration=1):        sample_rate = 44100        list = [294, 329, 349, 370, 392, 416, 440, 467, 494]        for freq in list:            amplitude = 4096            t = np.linspace(0, duration, int(sample_rate * duration))            wave = 0.5 * amplitude * np.sin(np.pi * freq * t) * np.exp(-0.0004 * 2 * np.pi * freq * t)            divided = 2            for iterator in range(4, 15, 2):                wave += 10 * amplitude * np.sin(iterator * np.pi * freq * t) * np.exp(                    -0.0001 * 2 * np.pi * freq * t) / divided                divided *= 2            wave += wave * wave * wave            wave *= 1 + (16 * t * np.exp(-6 * t))            audio = wave * (2 ** 15 - 1) / np.max(np.abs(wave))            audio = audio.astype(np.int16)            self.pianoSounds.append(audio)    def guitar(self):        frequenciesOfString = [[98], [123], [147], [196], [294], [392], [294], [196], [100],                               [400]]  ## specify any notes we need        for frequency in frequenciesOfString:            samplingFrequency = 7000            unit_delay = 0  # samplingFrequency//3## return int not float            delays = [unit_delay * _ for _ in range(len(frequency))]            stretch_factors = [2 * f / 98 for f in frequency]            strings = []            for freq, delay, stretch_factor in zip(frequency, delays, stretch_factors):                string = GuitarString(freq, delay, samplingFrequency, stretch_factor)                strings.append(string)            guitar_sound = [sum(string.get_sample() for string in strings) for _ in range(samplingFrequency * 6)]            self.guitar_sounds.append(guitar_sound)    def virtual_Instruments_thread_Function(self):        virtual_Instruments_thread = threading.Thread(target=self.virtualInstruments)        virtual_Instruments_thread.start()    def virtualInstruments(self):                while (True):            notes = keyboard.read_key()            if notes in self.pianos:                sounddevice.play(self.keysandnotes[notes],samplerate=self.horizontalSlider_setting.value())            elif notes in self.guitars:                sounddevice.play(self.keysandnotes[notes], samplerate=7000)            elif notes in self.drumsss:                sounddevice.play(self.keysandnotes[notes], samplerate=3000)            time.sleep(.5)    def open(self):        self.player.setVolume(50)  # reset        self.horizontalSlider_volume.setValue(50)  # reset        for n in range(3):            self.sliders[n].setValue(5)  # reset        path = QFileDialog.getOpenFileName()[0]  # get file path        self.originalPath = path  # store original path        filename = path        with contextlib.closing(wave.open(filename, 'r')) as f:            frames = f.getnframes()            rate = f.getframerate()            self.duration = frames / float(rate)        self.samplingFrequency, self.soundOriginaal = wavfile.read(path)        self.length_in_seconds = self.soundOriginaal.shape[0] / self.samplingFrequency        self.time = np.arange(self.soundOriginaal.shape[0]) / self.soundOriginaal.shape[0] * self.length_in_seconds        if len(self.soundOriginaal.shape) == 2:  ##if the file is stereo ,, make it mono            self.signalOriginaal = self.soundOriginaal[:, 1]        else:            self.signalOriginaal = self.soundOriginaal[:]        self.fft_spectrumOriginal = np.fft.rfft(self.signalOriginaal)        self.frequencyBins = np.fft.rfftfreq(self.signalOriginaal.size, d=1. / self.samplingFrequency)        self.timer_fileDuration.setInterval(int(self.duration * (10 ** 3)))  ##initializing timer        self.timer_fileDuration.start()        self.playfile(path)        self.plotting()        self.play()    def equalizer(self, sliderIndex, minFreqency, maxFreqency):        self.timer_fileDuration.setInterval(int(self.duration * (10 ** 3)))  # timer reset        self.timer_fileDuration.start()        self.timer_updatePlot.start()        for i, frequency in enumerate(self.frequencyBins):            if frequency > minFreqency and frequency < maxFreqency:                self.fft_spectrumCurrent[i] = self.fft_spectrumOriginal[i] * (                        self.sliders[sliderIndex].value() / 5)  ##amplitude * gain from slider        newSound = np.fft.irfft(self.fft_spectrumCurrent)  ##back to time domain        directory = "/Users/mn3n3/Documents/GitHub/github-equalizer/Trash/trash" + str(self.fileCount) + ".wav" ## must be changed according to the developer machine        wavfile.write(directory, self.samplingFrequency, newSound.astype(np.int16))        path = os.path.abspath(directory)        self.playfile(path)        self.fileCount += 1    def playfile(self, path):        samplingFrequency, self.sound = wavfile.read(path)        if len(self.sound.shape) == 2:  # if stereo ,,, make it mono            self.signal = self.sound[:, 1]        else:            self.signal = self.sound[:]        self.fft_spectrumCurrent = np.fft.rfft(self.signal)        url = QUrl.fromLocalFile(path)        content = QMediaContent(url)        self.player.setMedia(content)        self.player.play()        self.play()        self.plotSpectrogram()    def play_pauseFunction(self):        if (self.play_pause_flag == 0):            self.pause()        else:            self.play()    def pause(self):        self.player.setMuted(True)        self.timer_updatePlot.stop()        self.timer_fileDuration.stop()        self.play_pause_flag = 1    def play(self):        self.player.setMuted(False)        self.timer_updatePlot.start()        self.timer_fileDuration.start()        self.play_pause_flag = 0    def volumeControl(self):        self.player.setVolume(self.horizontalSlider_volume.value())    def resetFunction(self):        self.player.setVolume(50)        self.horizontalSlider_volume.setValue(50)        for n in range(3):            self.sliders[n].setValue(5)        self.updatePlotIndex = 0        self.timer_fileDuration.setInterval(int(self.duration * (10 ** 3)))        self.timer_fileDuration.start()        self.timer_updatePlot.start()        self.playfile(self.originalPath)    def plotting(self):        self.data = self.signal[:] / max(self.signal)  ##normlization        self.data_line = self.graphicsView_signal.plot(self.time, self.data, pen=self.pens[3])        self.updatePlotIndex = 0        self.timer_updatePlot.start()  ##signal moves    def update_plot_data(self):        self.timeUpdate = self.time[:self.updatePlotIndex]        self.signalUpdate = self.data[:self.updatePlotIndex]        self.updatePlotIndex += 50        self.graphicsView_signal.plotItem.setXRange(max(self.timeUpdate, default=0) - 1,                                                    max(self.timeUpdate, default=0))        self.data_line.setData(self.timeUpdate, self.signalUpdate)    def plotSpectrogram(self):        self.axes_Spectrogram.clear()        self.axes_Spectrogram.specgram(self.signal)        self.axes_Spectrogram.set_xticks([])        self.axes_Spectrogram.set_yticks([])        self.canvas_Spectrogram.draw()    def retranslateUi(self, MainWindow):        _translate = QtCore.QCoreApplication.translate        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))        self.play_pause.setText(_translate("MainWindow", "PLAY/PAUSE"))        self.reset.setText(_translate("MainWindow", "Reset"))        self.labelVolume.setText(_translate("MainWindow", "Voulme"))        self.label_piano.setText(_translate("MainWindow",                                            "<html><head/><body><p align=\"center\"><span style=\" font-weight:600;\">1 kHz -4.1 kHz<br/>Piano</span></p></body></html>"))        self.label_flute.setText(_translate("MainWindow",                                            "<html><head/><body><p align=\"center\"><span style=\" font-weight:600;\">250 Hz -2.5 kHz<br/>Flute</span></p></body></html>"))        self.label_drums.setText(_translate("MainWindow",                                            "<html><head/><body><p align=\"center\"><span style=\" font-weight:600;\">90 Hz -250 Hz<br/>Drums</span></p></body></html>"))        self.tabWidget.setTabText(self.tabWidget.indexOf(self.equalizerTab), _translate("MainWindow", "Equalizer"))        self.label_up.setText(_translate("MainWindow", "Setting"))        self.pushButton_piano1.setText(_translate("MainWindow", "C4"))        self.pushButton_piano2.setText(_translate("MainWindow", "D4"))        self.pushButton_piano3.setText(_translate("MainWindow", "E4"))        self.pushButton_piano4.setText(_translate("MainWindow", "F4"))        self.pushButton_piano5.setText(_translate("MainWindow", "G4"))        self.pushButton_piano6.setText(_translate("MainWindow", "A4"))        self.pushButton_piano7.setText(_translate("MainWindow", "B4"))        self.pushButton_piano8.setText(_translate("MainWindow", "C5"))        self.pushButton_piano9.setText(_translate("MainWindow", "D5"))        self.pushButton_piano10.setText(_translate("MainWindow", "E5"))        self.pushButton_piano11.setText(_translate("MainWindow", "F5"))        self.tabWidget.setTabText(self.tabWidget.indexOf(self.pianoTab), _translate("MainWindow", "Piano"))        self.label_keyboard_guitar.setText(_translate("MainWindow",                                                      "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">Keyboard Controls</span></p></body></html>"))        self.keyboard_guitar.setText(_translate("MainWindow",                                                "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"                                                "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"                                                "p, li { white-space: pre-wrap; }\n"                                                "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8pt; font-weight:400; font-style:normal;\">\n"                                                "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:14pt; font-weight:600;\">A S D F G</span></p></body></html>"))        self.tabWidget.setTabText(self.tabWidget.indexOf(self.guitarTab), _translate("MainWindow", "Guitar"))        self.label_keyboard_drums.setText(_translate("MainWindow",                                                     "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">Keyboard Controls</span></p></body></html>"))        self.keyboard_drums.setText(_translate("MainWindow",                                               "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"                                               "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"                                               "p, li { white-space: pre-wrap; }\n"                                               "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8pt; font-weight:400; font-style:normal;\">\n"                                               "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:14pt; font-weight:600;\">Z X C V B</span></p></body></html>"))        self.tabWidget.setTabText(self.tabWidget.indexOf(self.drumsTab), _translate("MainWindow", "Drums"))        self.menuFile.setTitle(_translate("MainWindow", "File"))        self.actionOpen.setText(_translate("MainWindow", "Open"))if __name__ == "__main__":    import sys    app = QtWidgets.QApplication(sys.argv)    MainWindow = QtWidgets.QMainWindow()    ui = Ui_MainWindow()    ui.setupUi(MainWindow)    MainWindow.show()    sys.exit(app.exec_())